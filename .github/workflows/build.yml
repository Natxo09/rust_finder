name: Build

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: RustFinder-windows.zip
            asset_name: rust_finder.exe
          - os: ubuntu-latest
            artifact_name: RustFinder-linux.tar.gz
            asset_name: rust_finder
          - os: macos-latest
            artifact_name: RustFinder-macos.tar.gz
            asset_name: rust_finder

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libxcb1-dev \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxkbcommon-dev \
          libssl-dev \
          libx11-dev \
          libx11-xcb-dev \
          libxcb-randr0-dev \
          libxcb-icccm4-dev \
          libxcb-keysyms1-dev \
          libxcb-dri2-0-dev \
          libxcb-xkb-dev \
          xorg-dev

    - name: Build
      run: cargo build --release
      timeout-minutes: 20
    
    - name: Clean Package Directory
      shell: bash
      run: rm -rf target/package || true
    
    - name: Create Package Directory
      shell: bash
      run: mkdir -p target/package
    
    - name: Package Windows
      if: matrix.os == 'windows-latest'
      run: |
        mkdir target\package\windows 2>nul || true
        copy target\release\rust_finder.exe target\package\windows\
        copy assets\icon.ico target\package\windows\
        powershell Compress-Archive -Path "target\package\windows\*" -DestinationPath "target\package\${{ matrix.artifact_name }}" -Force
      shell: cmd
    
    - name: Package Linux/macOS
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p target/package/dist
        cp target/release/rust_finder target/package/dist/
        cp assets/icon.* target/package/dist/
        cd target/package
        tar czf ${{ matrix.artifact_name }} dist/*
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-build
        path: target/package/${{ matrix.artifact_name }}
        retention-days: 90
      if: success()

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: target/package/${{ matrix.artifact_name }}
        draft: false
        prerelease: false